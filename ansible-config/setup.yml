- name: Initial server setup
  hosts: all
  become: true
  gather_facts: true
  vars_files:
      - secrets.yml
  tasks:
      - name: Ensure growpart is installed (for resizing partition)
        ansible.builtin.apt:
            name: cloud-guest-utils
            state: present

      - name: Check current disk and partition details
        ansible.builtin.command:
            cmd: lsblk -b --noheadings --raw -o NAME,SIZE,MOUNTPOINT
        register: disk_info
        changed_when: false

      - name: Debug disk info
        ansible.builtin.debug:
            var: disk_info.stdout_lines

      - name: Parse current root partition size
        ansible.builtin.set_fact:
            root_partition_size: >-
                {% if disk_info.stdout_lines %}
                  {{ (disk_info.stdout_lines | select('search', '^nvme0n1p1 ') | map('split') | list | first)[1] | int(default=0) }}
                {% else %}
                  0
                {% endif %}

      - name: Parse current disk size
        ansible.builtin.set_fact:
            disk_size: >-
                {% if disk_info.stdout_lines %}
                  {{ (disk_info.stdout_lines | select('search', '^nvme0n1 ') | map('split') | list | first)[1] | int(default=0) }}
                {% else %}
                  0
                {% endif %}

      - name: Debug parsed sizes
        ansible.builtin.debug:
            msg:
                - "Root partition size: {{ root_partition_size }} bytes"
                - "Disk size: {{ disk_size }} bytes"

      - name: Resize the filesystem to match the new partition size
        ansible.builtin.command:
            cmd: resize2fs /dev/nvme0n1p1
        when: root_partition_size < disk_size
        register: resize2fs_result
        changed_when: "'Filesystem already has the requested size' not in resize2fs_result.stdout"

      - name: Debug resize2fs output
        ansible.builtin.debug:
            var: resize2fs_result.stdout_lines

      - name: Ensure the filesystem is resized
        ansible.builtin.command:
            cmd: df -h /
        register: filesystem_info
        changed_when: false

      - name: Debug filesystem info
        ansible.builtin.debug:
            var: filesystem_info.stdout_lines

      - name: Update and upgrade the system
        ansible.builtin.apt:
            update_cache: true
            upgrade: dist

      - name: Install essential packages
        ansible.builtin.apt:
            name:
                - curl
                - wget
                - unzip
            state: present

      - name: Install Docker
        ansible.builtin.apt:
            name: docker.io
            state: present

      - name: Add current user to docker group
        ansible.builtin.user:
            name: "{{ ansible_user_id }}"
            groups: docker
            append: true

      - name: Install Docker Compose
        ansible.builtin.get_url:
            url: "https://github.com/docker/compose/releases/download/v2.22.0/docker-compose-Linux-x86_64"
            dest: /usr/local/bin/docker-compose
            mode: "0755"

      - name: Ensure Docker CLI plugins directory exists
        ansible.builtin.file:
            path: /usr/libexec/docker/cli-plugins
            state: directory
            mode: "0755"

      - name: Verify Docker Compose Installation
        ansible.builtin.command:
            cmd: /usr/local/bin/docker-compose --version
        register: docker_compose_version
        changed_when: false

      - name: Ensure /usr/local/bin is in PATH
        ansible.builtin.lineinfile:
            path: ~/.bashrc
            line: "export PATH=$PATH:/usr/local/bin"
            state: present

      - name: Ensure Docker Compose is available as a Docker subcommand
        ansible.builtin.file:
            src: /usr/local/bin/docker-compose
            dest: /usr/libexec/docker/cli-plugins/docker-compose
            state: link

      - name: Configure Nginx as a reverse proxy
        ansible.builtin.copy:
            dest: /etc/nginx/sites-available/styloslingerie
            content: |
                server {
                  listen 80;
                  server_name styloslingerie.com.br www.styloslingerie.com.br;

                  location / {
                    proxy_pass http://127.0.0.1:3000; # Porta do frontend
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
                  }

                  location /api {
                    proxy_pass http://127.0.0.1:3333; # Backend port
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
                  }

                  error_page 500 502 503 504 /50x.html;
                  location = /50x.html {
                    root /usr/share/nginx/html;
                  }
                }
            mode: "0644"
        notify:
            - Restart Nginx

      - name: Enable Nginx site configuration
        ansible.builtin.file:
            src: /etc/nginx/sites-available/styloslingerie
            dest: /etc/nginx/sites-enabled/styloslingerie
            state: link
            force: true

      - name: Remove default Nginx site
        ansible.builtin.file:
            path: /etc/nginx/sites-enabled/default
            state: absent

      - name: Test Nginx configuration
        ansible.builtin.command:
            cmd: nginx -t
        register: nginx_test
        changed_when: false
        failed_when: "'syntax is ok' not in nginx_test.stderr or 'test is successful' not in nginx_test.stderr"

      - name: Restart Nginx
        ansible.builtin.service:
            name: nginx
            state: restarted

      - name: Find existing DNS record for frontend
        ansible.builtin.uri:
            url: "https://api.cloudflare.com/client/v4/zones/{{ cloudflare_zone_id }}/dns_records?type=A&name=styloslingerie.com.br"
            method: GET
            headers:
                Authorization: "Bearer {{ cloudflare_api_token }}"
                Content-Type: "application/json"
        register: existing_record

      - name: Update existing DNS record for frontend
        ansible.builtin.uri:
            url: "https://api.cloudflare.com/client/v4/zones/{{ cloudflare_zone_id }}/dns_records/{{ existing_record.json.result[0].id }}"
            method: PUT
            headers:
                Authorization: "Bearer {{ cloudflare_api_token }}"
                Content-Type: "application/json"
            body_format: json
            body:
                type: A
                name: styloslingerie.com.br
                content: "52.23.117.92"
                proxied: true
        when: existing_record.json.result | length > 0

      - name: Update DNS record for backend in Cloudflare
        ansible.builtin.uri:
            url: "https://api.cloudflare.com/client/v4/zones/{{ cloudflare_zone_id }}/dns_records"
            method: POST
            headers:
                Authorization: "Bearer {{ cloudflare_api_token }}"
                Content-Type: "application/json"
            body: |
                {
                  "type": "A",
                  "name": "api.styloslingerie.com.br",
                  "content": "52.23.117.92",
                  "proxied": true
                }
            body_format: json
            status_code: 200

  handlers:
      - name: Restart Nginx
        ansible.builtin.service:
            name: nginx
            state: restarted
